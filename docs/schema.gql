schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

input CreateShowInput {
  name: String!
}

type CreateShowPayload {
  id: ID
  show: show
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

"""mutation root"""
type mutation_root {
  create_show(input: CreateShowInput!): CreateShowPayload!

  """
  delete data from the table: "show"
  """
  delete_show(
    """filter the rows which have to be deleted"""
    where: show_bool_exp!
  ): show_mutation_response

  """
  delete single row from the table: "show"
  """
  delete_show_by_pk(id: uuid!): show

  """
  insert data into the table: "show"
  """
  insert_show(
    """the rows to be inserted"""
    objects: [show_insert_input!]!

    """upsert condition"""
    on_conflict: show_on_conflict
  ): show_mutation_response

  """
  insert a single row into the table: "show"
  """
  insert_show_one(
    """the row to be inserted"""
    object: show_insert_input!

    """upsert condition"""
    on_conflict: show_on_conflict
  ): show

  """
  update data of the table: "show"
  """
  update_show(
    """sets the columns of the filtered rows to the given values"""
    _set: show_set_input

    """filter the rows which have to be updated"""
    where: show_bool_exp!
  ): show_mutation_response

  """
  update single row of the table: "show"
  """
  update_show_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: show_set_input
    pk_columns: show_pk_columns_input!
  ): show
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

type query_root {
  """
  fetch data from the table: "show"
  """
  show(
    """distinct select on columns"""
    distinct_on: [show_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [show_order_by!]

    """filter the rows returned"""
    where: show_bool_exp
  ): [show!]!

  """
  fetch aggregated fields from the table: "show"
  """
  show_aggregate(
    """distinct select on columns"""
    distinct_on: [show_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [show_order_by!]

    """filter the rows returned"""
    where: show_bool_exp
  ): show_aggregate!

  """fetch data from the table: "show" using primary key columns"""
  show_by_pk(id: uuid!): show
}

"""
columns and relationships of "show"
"""
type show {
  id: uuid!
  name: String!
}

"""
aggregated selection of "show"
"""
type show_aggregate {
  aggregate: show_aggregate_fields
  nodes: [show!]!
}

"""
aggregate fields of "show"
"""
type show_aggregate_fields {
  count(columns: [show_select_column!], distinct: Boolean): Int!
  max: show_max_fields
  min: show_min_fields
}

"""
Boolean expression to filter rows from the table "show". All fields are combined with a logical 'AND'.
"""
input show_bool_exp {
  _and: [show_bool_exp!]
  _not: show_bool_exp
  _or: [show_bool_exp!]
  id: uuid_comparison_exp
  name: String_comparison_exp
}

"""
unique or primary key constraints on table "show"
"""
enum show_constraint {
  """unique or primary key constraint"""
  show_pkey
}

"""
input type for inserting data into table "show"
"""
input show_insert_input {
  id: uuid
  name: String
}

"""aggregate max on columns"""
type show_max_fields {
  id: uuid
  name: String
}

"""aggregate min on columns"""
type show_min_fields {
  id: uuid
  name: String
}

"""
response of any mutation on the table "show"
"""
type show_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [show!]!
}

"""
on_conflict condition type for table "show"
"""
input show_on_conflict {
  constraint: show_constraint!
  update_columns: [show_update_column!]! = []
  where: show_bool_exp
}

"""Ordering options when selecting data from "show"."""
input show_order_by {
  id: order_by
  name: order_by
}

"""primary key columns input for table: show"""
input show_pk_columns_input {
  id: uuid!
}

"""
select columns of table "show"
"""
enum show_select_column {
  """column name"""
  id

  """column name"""
  name
}

"""
input type for updating data in table "show"
"""
input show_set_input {
  id: uuid
  name: String
}

"""
update columns of table "show"
"""
enum show_update_column {
  """column name"""
  id

  """column name"""
  name
}

type subscription_root {
  """
  fetch data from the table: "show"
  """
  show(
    """distinct select on columns"""
    distinct_on: [show_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [show_order_by!]

    """filter the rows returned"""
    where: show_bool_exp
  ): [show!]!

  """
  fetch aggregated fields from the table: "show"
  """
  show_aggregate(
    """distinct select on columns"""
    distinct_on: [show_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [show_order_by!]

    """filter the rows returned"""
    where: show_bool_exp
  ): show_aggregate!

  """fetch data from the table: "show" using primary key columns"""
  show_by_pk(id: uuid!): show
}

scalar uuid

"""
Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'.
"""
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}

