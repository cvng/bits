schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""
columns and relationships of "show"
"""
type Show {
  id: uuid!
  name: String!
  namingConvention: String
}

"""
aggregated selection of "show"
"""
type ShowAggregate {
  aggregate: ShowAggregateFields
  nodes: [Show!]!
}

"""
aggregate fields of "show"
"""
type ShowAggregateFields {
  count(columns: [ShowSelectColumn!], distinct: Boolean): Int!
  max: ShowMaxFields
  min: ShowMinFields
}

"""
Boolean expression to filter rows from the table "show". All fields are combined with a logical 'AND'.
"""
input ShowBoolExp {
  _and: [ShowBoolExp!]
  _not: ShowBoolExp
  _or: [ShowBoolExp!]
  id: UuidComparisonExp
  name: StringComparisonExp
  namingConvention: StringComparisonExp
}

"""
unique or primary key constraints on table "show"
"""
enum ShowConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  show_pkey
}

"""
input type for inserting data into table "show"
"""
input ShowInsertInput {
  id: uuid
  name: String
  namingConvention: String
}

"""aggregate max on columns"""
type ShowMaxFields {
  id: uuid
  name: String
  namingConvention: String
}

"""aggregate min on columns"""
type ShowMinFields {
  id: uuid
  name: String
  namingConvention: String
}

"""
response of any mutation on the table "show"
"""
type ShowMutationResponse {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [Show!]!
}

"""
on_conflict condition type for table "show"
"""
input ShowOnConflict {
  constraint: ShowConstraint!
  update_columns: [ShowUpdateColumn!]! = []
  where: ShowBoolExp
}

"""Ordering options when selecting data from "show"."""
input ShowOrderBy {
  id: orderBy
  name: orderBy
  namingConvention: orderBy
}

"""primary key columns input for table: show"""
input ShowPkColumnsInput {
  id: uuid!
}

"""
select columns of table "show"
"""
enum ShowSelectColumn {
  """column name"""
  id

  """column name"""
  name

  """column name"""
  namingConvention
}

"""
input type for updating data in table "show"
"""
input ShowSetInput {
  id: uuid
  name: String
  namingConvention: String
}

"""
update columns of table "show"
"""
enum ShowUpdateColumn {
  """column name"""
  id

  """column name"""
  name

  """column name"""
  namingConvention
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input StringComparisonExp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _isNull: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

"""
Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'.
"""
input UuidComparisonExp {
  _cast: uuid_cast_exp
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _isNull: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "show"
  """
  deleteShow(
    """filter the rows which have to be deleted"""
    where: ShowBoolExp!
  ): ShowMutationResponse

  """
  delete single row from the table: "show"
  """
  deleteShowByPk(id: uuid!): Show

  """
  insert data into the table: "show"
  """
  insertShow(
    """the rows to be inserted"""
    objects: [ShowInsertInput!]!

    """upsert condition"""
    onConflict: ShowOnConflict
  ): ShowMutationResponse

  """
  insert a single row into the table: "show"
  """
  insertShowOne(
    """the row to be inserted"""
    object: ShowInsertInput!

    """upsert condition"""
    onConflict: ShowOnConflict
  ): Show

  """
  update data of the table: "show"
  """
  updateShow(
    """sets the columns of the filtered rows to the given values"""
    _set: ShowSetInput

    """filter the rows which have to be updated"""
    where: ShowBoolExp!
  ): ShowMutationResponse

  """
  update single row of the table: "show"
  """
  updateShowByPk(
    """sets the columns of the filtered rows to the given values"""
    _set: ShowSetInput
    pk_columns: ShowPkColumnsInput!
  ): Show
}

"""column ordering options"""
enum orderBy {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  ascNullsFirst

  """in ascending order, nulls last"""
  ascNullsLast

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  descNullsFirst

  """in descending order, nulls last"""
  descNullsLast
}

type query_root {
  """
  fetch aggregated fields from the table: "show"
  """
  showAggregate(
    """distinct select on columns"""
    distinctOn: [ShowSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ShowOrderBy!]

    """filter the rows returned"""
    where: ShowBoolExp
  ): ShowAggregate!

  """fetch data from the table: "show" using primary key columns"""
  showByPk(id: uuid!): Show

  """
  fetch data from the table: "show"
  """
  shows(
    """distinct select on columns"""
    distinctOn: [ShowSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ShowOrderBy!]

    """filter the rows returned"""
    where: ShowBoolExp
  ): [Show!]!
}

type subscription_root {
  """
  fetch aggregated fields from the table: "show"
  """
  showAggregate(
    """distinct select on columns"""
    distinctOn: [ShowSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ShowOrderBy!]

    """filter the rows returned"""
    where: ShowBoolExp
  ): ShowAggregate!

  """fetch data from the table: "show" using primary key columns"""
  showByPk(id: uuid!): Show

  """
  fetch data from the table: "show"
  """
  shows(
    """distinct select on columns"""
    distinctOn: [ShowSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ShowOrderBy!]

    """filter the rows returned"""
    where: ShowBoolExp
  ): [Show!]!
}

scalar uuid

input uuid_cast_exp {
  String: StringComparisonExp
}

