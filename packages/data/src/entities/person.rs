//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.3

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "person")]
pub struct Model {
  #[sea_orm(primary_key, auto_increment = false)]
  pub id: Uuid,
  pub created: DateTimeWithTimeZone,
  pub updated: Option<DateTimeWithTimeZone>,
  #[sea_orm(column_type = "Text", unique)]
  pub email: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
  #[sea_orm(has_many = "super::bid::Entity")]
  Bid,
  #[sea_orm(has_many = "super::comment::Entity")]
  Comment,
  #[sea_orm(has_many = "super::product::Entity")]
  Product,
  #[sea_orm(has_many = "super::show::Entity")]
  Show,
}

impl Related<super::bid::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::Bid.def()
  }
}

impl Related<super::comment::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::Comment.def()
  }
}

impl Related<super::product::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::Product.def()
  }
}

impl Related<super::show::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::Show.def()
  }
}

impl ActiveModelBehavior for ActiveModel {}
