//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.3

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "comment")]
pub struct Model {
  #[sea_orm(primary_key, auto_increment = false)]
  pub id: Uuid,
  pub created: DateTimeWithTimeZone,
  pub updated: Option<DateTimeWithTimeZone>,
  pub author_id: Uuid,
  pub show_id: Uuid,
  #[sea_orm(column_type = "Text")]
  pub text: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
  #[sea_orm(
    belongs_to = "super::person::Entity",
    from = "Column::AuthorId",
    to = "super::person::Column::Id",
    on_update = "NoAction",
    on_delete = "NoAction"
  )]
  Person,
  #[sea_orm(
    belongs_to = "super::show::Entity",
    from = "Column::ShowId",
    to = "super::show::Column::Id",
    on_update = "NoAction",
    on_delete = "NoAction"
  )]
  Show,
}

impl Related<super::person::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::Person.def()
  }
}

impl Related<super::show::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::Show.def()
  }
}

impl ActiveModelBehavior for ActiveModel {}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelatedEntity)]
pub enum RelatedEntity {
  #[sea_orm(entity = "super::person::Entity")]
  Person,
  #[sea_orm(entity = "super::show::Entity")]
  Show,
}
