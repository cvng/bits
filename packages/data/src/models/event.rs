//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.3

use super::sea_orm_active_enums::EventType;
use sea_orm::entity::prelude::*;
use serde::Serialize;

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
  fn table_name(&self) -> &str {
    "event"
  }
}

#[derive(
  Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq, Serialize,
)]
pub struct Model {
  pub id: i64,
  pub created: Option<DateTimeWithTimeZone>,
  pub r#type: EventType,
  pub data: Json,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
  Id,
  Created,
  Type,
  Data,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
  Id,
}

impl PrimaryKeyTrait for PrimaryKey {
  type ValueType = i64;
  fn auto_increment() -> bool {
    true
  }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {}

impl ColumnTrait for Column {
  type EntityName = Entity;
  fn def(&self) -> ColumnDef {
    match self {
      Self::Id => ColumnType::BigInteger.def(),
      Self::Created => ColumnType::TimestampWithTimeZone.def(),
      Self::Type => EventType::db_type().def(),
      Self::Data => ColumnType::JsonBinary.def(),
    }
  }
}

impl RelationTrait for Relation {
  fn def(&self) -> RelationDef {
    panic!("No RelationDef")
  }
}

impl ActiveModelBehavior for ActiveModel {}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelatedEntity)]
pub enum RelatedEntity {}
